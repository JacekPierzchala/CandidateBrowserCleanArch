@page "/users/resetpassword"
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

@if (ResetProcessError)
{
    <RadzenAlert Title="@messageTitle" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenText>@message</RadzenText>
    </RadzenAlert>
}

@if (!ResetProcessPending)
{
        <RadzenStack Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 450px; overflow: hidden;">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-0">Candidates Browser</RadzenText>
        </RadzenCard>
        <EditForm Model="ResetPasswordViewModel" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenCard>
                <RadzenStack>
                    <RadzenPassword Placeholder="New Password" @bind-Value="ResetPasswordViewModel.NewPassword" />
                    <RadzenPassword Placeholder="Confirm Password" @bind-Value="ResetPasswordViewModel.ConfirmNewPassword" />
                    <RadzenButton class="mt-1" ButtonType="ButtonType.Submit"><RadzenIcon Icon="login" />Reset</RadzenButton>
                </RadzenStack>
            </RadzenCard>
        </EditForm>
        <RadzenButton class="mt-1" Click="BackToLogin" ButtonType="ButtonType.Submit"><RadzenIcon Icon="arrow_back_ios_new" />Back to Login</RadzenButton>
        </RadzenStack>
}
else
{
    <LoadingElement Message="Sending reset password request ..." />

}



@code {
    public string? Token;
    public string? UserId;

    ResetPasswordViewModel ResetPasswordViewModel = new();
    bool ResetProcessPending;
    bool ResetProcessError;

    string message = string.Empty;
    string messageTitle = string.Empty;


    private async Task HandleResetPassword()
    {
        StateHasChanged();
        ResetProcessPending = true;
        ResetProcessError = false;

        var url = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(url.Query);
        if (queryStrings.TryGetValue("userId", out var userId))
        {
            ResetPasswordViewModel.UserId = userId;
        }
        if (queryStrings.TryGetValue("token", out var token))
        {
            ResetPasswordViewModel.Token = token;
        }

        var response = await AuthenticationService.ResetPasswordAsync(ResetPasswordViewModel);
        if (response.Success)
        {
            NavigationManager.NavigateTo(UrlStatics.login);
        }
        else
        {
            message = response.ValidationErrors;
            messageTitle = response.Message;
            ResetProcessError = true;
        }
        ResetProcessPending = false;

        StateHasChanged();

    }

    private void BackToLogin()
    {
       NavigationManager.NavigateTo(UrlStatics.login);
    }
}
